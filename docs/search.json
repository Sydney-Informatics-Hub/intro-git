[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SIH Introduction to version control using git",
    "section": "",
    "text": "This course is aimed at researchers, students, and industry professionals who want to learn about version controlling their code (or text files).\nThis course is adapted from Version Control with Git by staff from the Sydney Informatics Hub (Michael Lynch and Darya Vanichkina).\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "index.html#trainers",
    "href": "index.html#trainers",
    "title": "SIH Introduction to version control using git",
    "section": "Trainers",
    "text": "Trainers\n\nMichael Lynch (Research Software Engineering Group Lead)\nKristian Maras (MSc Quant Fin)\nNathaniel (Nate) Butterworth (PhD Computational Geophysics)\nTim White (PhD Astrophysics)\nDarya Vanichkina (PhD Bioinformatics, SFHEA)"
  },
  {
    "objectID": "index.html#course-pre-requisites-and-setup-requirements",
    "href": "index.html#course-pre-requisites-and-setup-requirements",
    "title": "SIH Introduction to version control using git",
    "section": "Course pre-requisites and setup requirements",
    "text": "Course pre-requisites and setup requirements\n\nNo previous programming experience is required.\nTraining will be delivered in-person, so you will need your own laptop with a stable internet connection and the ability to install your own software."
  },
  {
    "objectID": "index.html#code-of-conduct",
    "href": "index.html#code-of-conduct",
    "title": "SIH Introduction to version control using git",
    "section": "Code of Conduct",
    "text": "Code of Conduct\nWe expect all attendees of our training to follow our code of conduct, including bullying, harassment and discrimination prevention policies.\nIn order to foster a positive and professional learning environment we encourage the following kinds of behaviours at all our events and on our platforms:\n\nUse welcoming and inclusive language\nBe respectful of different viewpoints and experiences\nGracefully accept constructive criticism\nFocus on what is best for the community\nShow courtesy and respect towards other community members\n\nOur full CoC, with incident reporting guidelines, is available here."
  },
  {
    "objectID": "index.html#setup-instructions",
    "href": "index.html#setup-instructions",
    "title": "SIH Introduction to version control using git",
    "section": "Setup Instructions",
    "text": "Setup Instructions\nPlease complete the Setup Instructions before the course.\nIf you have any trouble, please get in contact with us via email ASAP."
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Setup",
    "section": "",
    "text": "Git is a version control system that lets you track who made changes to what when and has options for easily updating a shared or public version of your code on github.com.\n\nYou will need a supported web browser.\n\nPrior to the session, we recommend you use your “official” university email to create an account on github.com. You can skip this step if you already have a github.com and you know the username/password you used to log in to it.\n\nGitHub accounts are free, and - with your University affiliation - you may be able to get a “Pro” GitHub account for free (you need to email the GitHub Education team for this).\nNote that a free account will suffice for all of what we are doing in the training session, so you don’t need to do this before class.\nPlease consider what personal information you’d like to reveal. For example, you may want to review these instructions for keeping your email address private provided at GitHub.\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "setup.html#install-git",
    "href": "setup.html#install-git",
    "title": "Setup",
    "section": "Install git",
    "text": "Install git\n\nWindows\n\nDownload the Git for Windows installer, also known as GitBash.\nRun the installer and follow the steps below:\n\nClick on “Next” four times (two times if you’ve previously installed Git). You don’t need to change anything in the Information, location, components, and start menu screens.\nFrom the dropdown menu, “Choosing the default editor used by Git”, select “Use the Vim editor by default” and click on “Next”.\nOn the page that says “Adjusting the name of the initial branch in new repositories”, ensure that “Let Git decide” is selected. This will ensure the highest level of compatibility for our lessons.\nEnsure that “Git from the command line and also from 3rd-party software” is selected and click on “Next”. (If you don’t do this Git Bash will not work properly, requiring you to remove the Git Bash installation, re-run the installer and to select the “Git from the command line and also from 3rd-party software” option.)\nSelect “Use bundled OpenSSH”.\nEnsure that “Use the native Windows Secure Channel Library” is selected and click on “Next”.\nEnsure that “Checkout Windows-style, commit Unix-style line endings” is selected and click on “Next”.\nEnsure that “Use Windows’ default console window” is selected and click on “Next”.\nEnsure that “Default (fast-forward or merge) is selected and click”Next”\nEnsure that “Git Credential Manager” is selected and click on “Next”.\nEnsure that “Enable file system caching” is selected and click on “Next”.\nClick on “Install”.\nClick on “Finish” or “Next”.\n\nIf your “HOME” environment variable is not set (or you don’t know what this is):\nOpen command prompt (Open Start Menu then type cmd and press Enter)\nType the following line into the command prompt window exactly as shown:\n\nsetx HOME \"%USERPROFILE%\"\n\nPress Enter, you should see SUCCESS: Specified value was saved.\nQuit command prompt by typing exit then pressing Enter\n\nThis will provide you with both Git and Bash in the Git Bash program.\n\n\n\nMacOS\nThe easiest way to install git on a Mac is by installing Xcode Command Line Tools (note: you do not need all of Xcode!, which takes a lot more space on your hard drive).\nTo do this, open your Terminal application and type:\ngit --version\nIf you don’t have git installed already, a popup will appear:\n\nPress on the blue “Install” button and, after entering your password, git should be installed.\n\n\n\nLinux\nDepending on the Linux distribution on your laptop, you will need to open a Terminal application and execute one of the following commands:\n\nDebian/Ubuntu\nFor the latest stable version for your release of Debian/Ubuntu\napt-get install git\nFor Ubuntu, this PPA provides the latest stable upstream Git version\nadd-apt-repository ppa:git-core/ppa\napt update; apt install git\n\n\nFedora\nyum install git # up to Fedora 21\ndnf install git # Fedora 22 and later\n\n\nGentoo\nemerge --ask --verbose dev-vcs/git\n\n\nArch Linux\npacman -S git\n\n\nopenSUSE\nzypper install git\n\n\nMageia\nurpmi git\n\n\nNix/NixOS\nnix-env -i git\n\n\nFreeBSD\npkg install git\n\n\nSolaris 9/10/11\npkgutil -i git\n\n\nSolaris 11 Express\npkg install developer/versioning/git\n\n\nOpenBSD\npkg_add git"
  },
  {
    "objectID": "setup.html#optional-install-gitkraken",
    "href": "setup.html#optional-install-gitkraken",
    "title": "Setup",
    "section": "(Optional) Install GitKraken",
    "text": "(Optional) Install GitKraken\n\nWe will show but not necessarily walk through GitKraken, an excellent (but paid for!) Git GUI tool. When working on large, multi-branch open-source and internal projects, this type of a tool can be very useful to navigate the mess that a too-many branch workflow can create.\nGitHub Desktop is a free alternative developed by GitHub which you may want to use as a free GUI instead."
  },
  {
    "objectID": "notebooks/13_pull_requests.html",
    "href": "notebooks/13_pull_requests.html",
    "title": "SIH Introduction to Version Control using Git",
    "section": "",
    "text": "All materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/11_workflows.html",
    "href": "notebooks/11_workflows.html",
    "title": "SIH Introduction to Version Control using Git",
    "section": "",
    "text": "All materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/05_history.html",
    "href": "notebooks/05_history.html",
    "title": "SIH Introduction to Version Control using Git",
    "section": "",
    "text": "All materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/02_config.html",
    "href": "notebooks/02_config.html",
    "title": "SIH Introduction to Version Control using Git",
    "section": "",
    "text": "How do I configure Git?\n\n\n\n\n\nConfigure git the first time it is used on a computer.\nUnderstand the meaning of the --global configuration flag.\n\n\nWhen we use Git on a new computer for the first time, we need to configure a few things. Below are a few examples of configurations we will set as we get started with Git:\n\nOur name and email address,\nWhat our preferred text editor is\nThat we want to use these settings globally (i.e. for every project, so we don’t need to set it every time we create a new project/repository)\n\nOn a command line, Git commands are written as git verb options, where verb is what we actually want to do and options is additional optional information which may be needed for the verb. So here is how I set up my new laptop:\ngit config --global user.name \"Mike Lynch\"\ngit config --global user.email \"m.lynch@sydney.edu.au\"\nPlease use your own name and email address instead of mine. This user name and email will be associated with your subsequent Git activity, which means that any changes pushed to GitHub, BitBucket, GitLab or another Git host server after this lesson will include this information.\nFor this lesson, we will be interacting with GitHub and so the email address used should be the same as the one used when setting up your GitHub account. If you are concerned about privacy, please review GitHub’s instructions for keeping your email address private.\n\n\n\n\n\n\nKeeping your email private\n\n\n\nIf you elect to use a private email address with GitHub, then use that same email address for the user.email value, e.g. username@users.noreply.github.com replacing username with your GitHub one.\n\n\n\n\n\n\n\n\nLine Endings\n\n\n\nAs with other keys, when you hit Enter or ↵ or on Macs, Return on your keyboard, your computer encodes this input as a character. Different operating systems use different character(s) to represent the end of a line. (You may also hear these referred to as newlines or line breaks.) Because Git uses these characters to compare files, it may cause unexpected issues when editing a file on different machines. Though it is beyond the scope of this lesson, you can read more about this issue in the Pro Git book.\nYou can change the way Git recognizes and encodes line endings using the core.autocrlf command to git config. The following settings are recommended:\nOn macOS and Linux:\ngit config --global core.autocrlf input\nAnd on Windows:\ngit config --global core.autocrlf false\n\n\n\n\n\n\n\n\nExiting Vim\n\n\n\nNote that Vim is the default editor for many programs. If you haven’t used Vim before and wish to exit a session without saving your changes, press Esc then type :q! and hit Enter or ↵ or on Macs, Return. If you want to save your changes and quit, press Esc then type :wq and hit Enter or ↵ or on Macs, Return.\n\n\n\n\nIf you’d like to use another plain text editor, you can also configure git to use it. Below we provide (and hide) the configuration options for a number of possible options:\n\n\nDetails\n\n\n\ngit config --global core.editor \"atom --wait\"\n\n\n\ngit config --global core.editor \"nano -w\"\n\n\n\ngit config --global core.editor \"bbedit -w\"\n\n\n\ngit config --global core.editor \"/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl -n -w\"\n\n\n\ngit config --global core.editor \"'c:/program files (x86)/sublime text 3/sublime_text.exe' -w\"\n\n\n\ngit config --global core.editor \"'c:/program files/sublime text 3/sublime_text.exe' -w\"\n\n\n\ngit config --global core.editor \"c:/Windows/System32/notepad.exe\"\n\n\n\ngit config --global core.editor \"'c:/program files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"\n\n\n\ngit config --global core.editor \"'c:/program files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"\n\n\n\ngit config --global core.editor \"kate\"\n\n\n\ngit config --global core.editor \"gedit --wait --new-window\"\n\n\n\ngit config --global core.editor \"scratch-text-editor\"\n\n\n\ngit config --global core.editor \"emacs\"\n\n\n\ngit config --global core.editor \"vim\"\n\n\n\ngit config --global core.editor \"code --wait\"\nIt is possible to reconfigure the text editor for Git whenever you want to change it.\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/02_config.html#default-branch-naming",
    "href": "notebooks/02_config.html#default-branch-naming",
    "title": "SIH Introduction to Version Control using Git",
    "section": "Default branch naming",
    "text": "Default branch naming\nGit (2.28+) allows configuration of the name of the branch created when you initialize any new repository. We’ll set it to main:\ngit config --global init.defaultBranch main\n\n\n\n\n\n\nSome history of default Git branch naming\n\n\n\nSource file changes are associated with a “branch.” For new learners in this lesson, it’s enough to know that branches exist, and this lesson uses one branch.\nBy default, Git will create a branch called master when you create a new repository with git init (as explained in the next Episode). This term evokes the racist practice of human slavery and the software development community has moved to adopt more inclusive language.\nIn 2020, most Git code hosting services transitioned to using main as the default branch. As an example, any new repository that is opened in GitHub and GitLab default to main. However, Git has not yet made the same change. As a result, local repositories must be manually configured have the same main branch name as most cloud services.\nFor versions of Git prior to 2.28, the change can be made on an individual repository level. The command for this is in the next episode. Note that if this value is unset in your local Git configuration, the init.defaultBranch value defaults to master.\n\n\nThe five commands we just ran above only need to be run once: the flag --global tells Git to use the settings for every project, in your user account, on this computer.\nYou can check your settings at any time:\ngit config --list\nYou can change your configuration as many times as you want: use the same commands to choose another editor or update your email address.\n\n\n\n\n\n\nProxy\n\n\n\nIn some networks you need to use a proxy. If this is the case, you may also need to tell Git about the proxy:\ngit config --global http.proxy proxy-url\ngit config --global https.proxy proxy-url\nTo disable the proxy, use\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n\n\n\n\n\n\n\n\nGit Help and Manual\n\n\n\nAlways remember that if you forget the subcommands or options of a git command, you can access the relevant list of options typing git <command> -h or access the corresponding Git manual by typing git <command> --help, e.g.:\ngit config -h\ngit config --help\nWhile viewing the manual, remember the : is a prompt waiting for commands and you can press Q to exit the manual.\nMore generally, you can get the list of available git commands and further resources of the Git manual typing:\ngit help\n\n\n\nKey Points\n\nUse git config with the --global option to configure a user name, email address, editor, and other preferences once per machine."
  },
  {
    "objectID": "notebooks/07_github.html",
    "href": "notebooks/07_github.html",
    "title": "SIH Introduction to Version Control using Git",
    "section": "",
    "text": "All materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/14_open_research.html",
    "href": "notebooks/14_open_research.html",
    "title": "SIH Introduction to Version Control using Git",
    "section": "",
    "text": "All materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/06_ignore.html",
    "href": "notebooks/06_ignore.html",
    "title": "Ignoring Things",
    "section": "",
    "text": "Objectives\n\nConfigure Git to ignore specific files.\nExplain why ignoring files can be useful.\n\n\nWhat if we have files that we do not want Git to track for us, like backup files created by our editor or intermediate files created during data analysis? Let’s create a few dummy files:\nmkdir results\ntouch a.dat b.dat c.dat results/a.out results/b.out\nand see what Git says:\ngit status\nOn branch main\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    a.dat\n    b.dat\n    c.dat\n    results/\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nPutting these files under version control would be a waste of disk space. What’s worse, having them all listed could distract us from changes that actually matter, so let’s tell Git to ignore them.\nWe do this by creating a file in the root directory of our project called .gitignore:\nnano .gitignore\ncat .gitignore\n*.dat\nresults/\nThese patterns tell Git to ignore any file whose name ends in .dat and everything in the results directory.\nOnce we have created this file, the output of git status is much cleaner:\n$ git status\nOn branch main\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .gitignore\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nThe only thing Git notices now is the newly-created .gitignore file. You might think we wouldn’t want to track it, but everyone we’re sharing our repository with will probably want to ignore the same things that we’re ignoring. Let’s add and commit .gitignore:\ngit add .gitignore\ngit commit -m \"Ignore data files and the results folder.\"\ngit status\nOn branch main\nnothing to commit, working directory clean\n\n\n\n\n\n\n.gitignore templates and your data folder\n\n\n\n\nIf any of the .dat files were already being tracked, Git would continue to track them! So if at all possible, add your data folder to .gitignore early in the life of your project.\nIf you’re working with a new programming language, you can often be unsure of what should be ignored. Luckily, github provides a curated repository, in which it has template .gitignore files for nearly all programming languages you’re likely to encounter.\n\n\n\nAs a bonus, using .gitignore helps us avoid accidentally adding files to the repository that we don’t want to track:\ngit add a.dat\nThe following paths are ignored by one of your .gitignore files:\na.dat\nUse -f if you really want to add them.\nIf we really want to override our ignore settings, we can use git add -f to force Git to add something. For example, git add -f a.dat. We can also always see the status of ignored files if we want:\ngit status --ignored\nOn branch main\nIgnored files:\n (use \"git add -f <file>...\" to include in what will be committed)\n\n        a.dat\n        b.dat\n        c.dat\n        results/\n\nnothing to commit, working directory clean\n\nChallenge: Ignoring Nested Files\nGiven a directory structure that looks like:\nresults/data\nresults/plots\nHow would you ignore only results/plots and not results/data?\n\n\nSolution\n\nIf you only want to ignore the contents of results/plots, you can change your .gitignore to ignore only the /plots/ subfolder by adding the following line to your .gitignore:\nresults/plots/\nThis line will ensure only the contents of results/plots is ignored, and not the contents of results/data.\nAs with most programming issues, there are a few alternative ways that one may ensure this ignore rule is followed. The “Ignoring Nested Files: Variation” exercise has a slightly different directory structure that presents an alternative solution. Further, the discussion page has more detail on ignore rules.\n\n\n\nIncluding Specific Files\nHow would you ignore all .dat files in your root directory except for final.dat? Hint: Find out what ! (the exclamation point operator) does\n\n\nSolution\n\nYou would add the following two lines to your .gitignore:\n*.dat           # ignore all data files\n!final.dat      # except final.data\nThe exclamation point operator will include a previously excluded entry.\nNote also that because you’ve previously committed .dat files in this lesson they will not be ignored with this new rule. Only future additions of .dat files added to the root directory will be ignored.\n\n\n\nChallenge: Ignoring Nested Files: Variation\nGiven a directory structure that looks similar to the earlier Nested Files exercise, but with a slightly different directory structure:\nresults/data\nresults/images\nresults/plots\nresults/analysis\nHow would you ignore all of the contents in the results folder, but not results/data? Hint: think a bit about how you created an exception with the ! operator before.\n\n\nSolution\n\nIf you want to ignore the contents of results/ but not those of results/data/, you can change your .gitignore to ignore the contents of results folder, but create an exception for the contents of the results/data subfolder. Your .gitignore would look like this:\nresults/*               # ignore everything in results folder\n!results/data/          # do not ignore results/data/ contents\n\n\n\nChallenge: Ignoring all data Files in a Directory\nAssuming you have an empty .gitignore file, and given a directory structure that looks like:\nresults/data/position/gps/a.dat\nresults/data/position/gps/b.dat\nresults/data/position/gps/c.dat\nresults/data/position/gps/info.txt\nresults/plots\nWhat’s the shortest .gitignore rule you could write to ignore all .dat files in result/data/position/gps? Do not ignore the info.txt.\n\n\nSolution\n\nAppending results/data/position/gps/*.dat will match every file in results/data/position/gps that ends with .dat. The file results/data/position/gps/info.txt will not be ignored.\n\n\n\nChallenge: Ignoring all data Files in the repository\nLet us assume you have many .dat files in different subdirectories of your repository. For example, you might have:\nresults/a.dat\ndata/experiment_1/b.dat\ndata/experiment_2/c.dat\ndata/experiment_2/variation_1/d.dat\nHow do you ignore all the .dat files, without explicitly listing the names of the corresponding folders?\n\n\nSolution\n\nIn the .gitignore file, write:\n**/*.dat               \nThis will ignore all the .dat files, regardless of their position in the directory tree. You can still include some specific exception with the exclamation point operator.\n\n\n\nChallenge: The Order of Rules\nGiven a .gitignore file with the following contents:\n*.dat\n!*.dat\nWhat will be the result?\n\n\nSolution\n\nThe ! modifier will negate an entry from a previously defined ignore pattern. Because the !*.dat entry negates all of the previous .dat files in the .gitignore, none of them will be ignored, and all .dat files will be tracked.\n\n\n\nChallenge: Log Files\nYou wrote a script that creates many intermediate log-files of the form log_01, log_02, log_03, etc. You want to keep them but you do not want to track them through git.\n\nWrite one .gitignore entry that excludes files of the form log_01, log_02, etc.\nTest your “ignore pattern” by creating some dummy files of the form log_01, etc.\nYou find that the file log_01 is very important after all, add it to the tracked files without changing the .gitignore again.\nDiscuss with your neighbor what other types of files could reside in your directory that you do not want to track and thus would exclude via .gitignore.\n\n\n\nSolution\n\n\nappend either log_* or log* as a new entry in your .gitignore\ntrack log_01 using git add -f log_01\n\n\n\n\nKey points\n\nThe .gitignore file tells Git what files to ignore.\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/04_changes.html",
    "href": "notebooks/04_changes.html",
    "title": "SIH Introduction to Version Control using Git",
    "section": "",
    "text": "All materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/09_branches.html",
    "href": "notebooks/09_branches.html",
    "title": "SIH Introduction to Version Control using Git",
    "section": "",
    "text": "All materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/03_create.html",
    "href": "notebooks/03_create.html",
    "title": "SIH Introduction to Version Control using Git",
    "section": "",
    "text": "Legitimate uses for nesting\n\n\n\nBut what happens if you WANT to have a nested repository, for example when you’re using a public project that you want to get updates for as part of your repository? Or a standard code library used across your entire lab/team that you all collectively maintain in another GitHub repo? This is the use case for something called submodules. Submodules are beyond the scope of this course, but we want to mention them here, in case you do need to do a version of the above, mixing open source software and your own tools in one repository.\n\n\n\nKey Points\n\ngit init initializes a repository.\nGit stores all of its repository data in the .git directory.\n\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/01_intro.html",
    "href": "notebooks/01_intro.html",
    "title": "SIH Introduction to Version Control using Git",
    "section": "",
    "text": "All materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/00_otherresources.html",
    "href": "notebooks/00_otherresources.html",
    "title": "SIH Introduction to Version Control using Git",
    "section": "",
    "text": "All materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/10_merging.html",
    "href": "notebooks/10_merging.html",
    "title": "SIH Introduction to Version Control using Git",
    "section": "",
    "text": "Git commits as a data structure\nThe commits which make up the history of a Git repository with multiple branches form a mathematical structure called a directed acyclic graph.\nEach commit is a node in the graph. The graph is directed because every edge links a commit to one or more parents, and this relationship is one-way.\nAnd the graph is acyclic because loops aren’t permitted - if you traverse the graph following a commit’s parents back to the root commit, you won’t pass through any of the same commits twice.\n\n\n\nA Directed Acyclic Graph\n\n\n\n\nFast-forwards\nThese are the simplest merge: where the two commits we are merging have a common shared history. This was the case in the example we just merged. Nothing new had been added to the main branch while Alice was working on her development branch, so there’s no need to work out how to combine the two histories.\nIn these cases, Git can ‘fast-forward’: it simply updates the head of our main branch to the commit at the tip of the develop branch.\n\n\n\nA Fast-Forward Merge\n\n\nBecause the merge is using commits which already exist, Git doesn’t prompt us for a commit message when it can fast-forward.\n\n\nMerges\nWe are now going to see what happens when we ask git to merge two branches which have diverged: that is, where there are new commits on either branch.\nFirst, let’s return to our development branch and make a change at the top of our script. Alice has noticed that she’s calculating the means of all the columns, but not using the resulting value, so we’ll remove that line:\ngit checkout development\nnano mean.py\ncat mean.py\nimport pandas as pd\ndataframe = pd.read_csv(\"rgb.csv\")\n\n\nreds = dataframe[\"red\"]\nprint(red.means())\nAlice then commits this change\ngit add mean.py\ngit commit mean.py -m \"Removed redundant means\"\n[development 7290b1c] Removed redundant means\n 1 file changed, 1 insertion(+), 1 deletion(-)\nThen, let’s make a change to mean.py on the main branch\ngit checkout main\nnano mean.py\ncat mean.py\nimport pandas as pd\ndataframe = pd.read_csv(\"rgb.csv\")\nmeans = dataframe.mean()\n\nblues = dataframe[\"blue\"]\nprint(blue.means())\nWe’ve decided to calculate the mean of the blue values, by modifying the two last lines of the script.\ngit add mean.py\ngit commit mean.py -m \"One line near the bottom\"\n[main 68ccb0e] Changed subset to blue\n 1 file changed, 2 insertions(+), 2 deletions(-)\nOur two branches now have different histories: each branch has a commit which doesn’t exist in the other branch.\nWe can compare the two files across branches using git diff\ngit diff development\ndiff --git a/mean.py b/mean.py\nindex 8f44245..67692ae 100644\n--- a/mean.py\n+++ b/mean.py\n@@ -1,6 +1,6 @@\n import pandas as pd\n dataframe = pd.read_csv(\"rgb.csv\")\n+means = dataframe.mean()\n\n-\n-reds = dataframe[\"red\"]\n-print(red.means())\n+blues = dataframe[\"blue\"]\n+print(blue.means())\nOnce again, because this is a diff from development to main, the changes we’ve made in main which aren’t in development show as inserts (+) and the changes in development which aren’t in main show as deletes (-)\nWe can now ask Git to merge the changes from development into our main branch\ngit merge development\nMerge branch 'development'\n# Please enter a commit message to explain why this merge is necessary,\n# especially if it merges an updated upstream into a topic branch.\n#\n# Lines starting with '#' will be ignored, and an empty message aborts\n# the commit.\nWhen we do this, git prompts us for a commit message: this is similar to what we’ve seen earlier when we’ve committed a change, but in this case, git has pre-filled the commit message with Merge branch 'development'\nThe reason git is asking for a message is because merging two branches which have diverged will create a new commit, called a merge commit.\nIn our first merge, because fast-forwarding was possible, there was no need for a merge commit.\nYou have the option here to add a more complicated message explaining why you’re merging, but for now we’ll just accept git’s default message and save:\nAuto-merging mean.py\nMerge made by the 'ort' strategy.\n mean.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\nThis output means that git has successfully merge the two versions of mean.py. Git reports that it’s used the ‘ort’ strategy - historically, git has had a number of different algorithms which it uses to try to combine commits. If you’re running an older version of Git, it might have used the ‘recursive’ strategy instead. Going into the details of how these algorithms work is a bit out of scope, but git will basically try to incorporate all of the diverging histories of each file into the result.\nIf we check our log:\ngit log --oneline\n06b8997 (HEAD -> main) Merge branch 'development'\n68ccb0e Changed subset to blue\n7290b1c (development) Removed redundant means\n905d031 Subset the rgb values to just red\n2408b26 Added some documentation\ndea7c3c Added .gitignore\n927b884 Calculates the means\n6abea37 Add a line which loads the data from a CSV file\n3c865ca Start a script to calculate the mean\nWe can see that this merge has created a new commit, and that the fact that it’s a merge commit is indicated in the history.\nYou can also see that commits from both main and development are now visible in the log.\nLet’s see what the file actually looks like after the merge.\ncat mean.py\nimport pandas as pd\ndataframe = pd.read_csv(\"rgb.csv\")\n\n\nblues = dataframe[\"blue\"]\nprint(blue.means())\nWe can see that git has incorporated both sets of changes: the redundant calculation of the means has been removed from the top of the file, and the subsetting is now done on “blue” rather than “red”\nFrom Git’s point of view, the merge was a success - it’s managed to bring the divergent histories of this file into one text and kept the features of both.\nIt’s worth pointing out that git is only interested in whether it can combined two sets of textual changes - just because a merge has succeeded, it’s no guarantee that your code actually works, or that it will even run.\nIn practice, there are a lot of software engineering techniques for verifying that code still works correctly after a merge - running a battery of unit tests, for example. And it’s possible to automate this process so that tests are run when, for example, a change is made to a particular branch on a repository on GitHub.\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/12_conflicts.html",
    "href": "notebooks/12_conflicts.html",
    "title": "SIH Introduction to Version Control using Git",
    "section": "",
    "text": "All materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/08_collab.html",
    "href": "notebooks/08_collab.html",
    "title": "SIH Introduction to Version Control using Git",
    "section": "",
    "text": "All materials copyright Sydney Informatics Hub, University of Sydney"
  }
]